import axios from 'axios';

export interface WhatsAppMessage {
  phone: string;
  message: string;
}

export interface WhatsAppResponse {
  success: boolean;
  messageId?: string;
  error?: string;
  details?: any;
}

/**
 * Envia uma mensagem via WhatsApp usando a API da Z-api
 */
export const sendWhatsAppMessage = async (
  phoneNumber: string,
  message: string,
  apiKey: string,
  instanceId: string
): Promise<WhatsAppResponse> => {
  try {
    // Limpar o n√∫mero de telefone (remover caracteres especiais)
    const cleanPhone = phoneNumber.replace(/\D/g, '');
    
    // Adicionar c√≥digo do pa√≠s se n√£o estiver presente
    const formattedPhone = cleanPhone.startsWith('55') ? cleanPhone : `55${cleanPhone}`;
    
    // URL da API Z-api
    const apiUrl = `https://api.z-api.io/instances/${instanceId}/token/${apiKey}/send-text`;
    
    console.log('üì± Enviando WhatsApp:', {
      phone: formattedPhone,
      message: message.substring(0, 100) + '...',
      instanceId,
      apiKey: apiKey.substring(0, 10) + '...'
    });

    const payload = {
      phone: formattedPhone,
      message: message
    };

    const response = await axios.post(apiUrl, payload, {
      headers: {
        'Content-Type': 'application/json',
        'Client-Token': apiKey
      },
      timeout: 10000 // 10 segundos de timeout
    });

    console.log('‚úÖ WhatsApp enviado com sucesso:', response.data);

    return {
      success: true,
      messageId: response.data?.messageId || response.data?.id,
      details: response.data
    };

  } catch (error: any) {
    console.error('‚ùå Erro ao enviar WhatsApp:', error);

    let errorMessage = 'Erro desconhecido ao enviar WhatsApp';
    
    if (error.response) {
      // Erro da API
      errorMessage = `Erro da API Z-api: ${error.response.status} - ${error.response.data?.message || error.response.statusText}`;
      console.error('Resposta da API:', error.response.data);
    } else if (error.request) {
      // Erro de rede
      errorMessage = 'Erro de conex√£o com a API Z-api';
    } else {
      // Erro de configura√ß√£o
      errorMessage = error.message;
    }

    return {
      success: false,
      error: errorMessage,
      details: error.response?.data
    };
  }
};

/**
 * Testa a conex√£o com a API Z-api
 */
export const testWhatsAppConnection = async (
  apiKey: string,
  instanceId: string
): Promise<WhatsAppResponse> => {
  try {
    const apiUrl = `https://api.z-api.io/instances/${instanceId}/token/${apiKey}/status`;
    
    console.log('üîç Testando conex√£o Z-api:', { instanceId, apiKey: apiKey.substring(0, 10) + '...' });

    const response = await axios.get(apiUrl, {
      headers: {
        'Client-Token': apiKey
      },
      timeout: 10000
    });

    console.log('‚úÖ Teste de conex√£o bem-sucedido:', response.data);

    return {
      success: true,
      details: response.data
    };

  } catch (error: any) {
    console.error('‚ùå Erro no teste de conex√£o:', error);

    let errorMessage = 'Erro ao testar conex√£o';
    
    if (error.response) {
      errorMessage = `Erro ${error.response.status}: ${error.response.data?.message || error.response.statusText}`;
    } else if (error.request) {
      errorMessage = 'Erro de conex√£o com a API';
    } else {
      errorMessage = error.message;
    }

    return {
      success: false,
      error: errorMessage,
      details: error.response?.data
    };
  }
};

/**
 * Formata uma mensagem de confirma√ß√£o de compra
 */
export const formatPurchaseConfirmationMessage = (
  customerName: string,
  planName: string,
  rechargeCode: string,
  companyName: string = 'Sistema de Recarga'
): string => {
  return `üéâ *Compra Aprovada!*

Ol√° *${customerName}*!

Sua compra foi processada com sucesso:

üì± *Plano:* ${planName}
üîë *C√≥digo:* \`${rechargeCode}\`

Para usar seu c√≥digo:
1Ô∏è‚É£ Disque *321# no seu celular
2Ô∏è‚É£ Digite o c√≥digo quando solicitado
3Ô∏è‚É£ Confirme a recarga

‚úÖ Obrigado por escolher a *${companyName}*!

_Mensagem autom√°tica - N√£o responda_`;
};

/**
 * Formata uma mensagem de lembrete de vencimento
 */
export const formatExpiryReminderMessage = (
  customerName: string,
  planName: string,
  daysUntilExpiry: number,
  expiryDate: string,
  companyName: string = 'Sistema de Recarga'
): string => {
  const urgencyEmoji = daysUntilExpiry <= 1 ? 'üö®' : daysUntilExpiry <= 3 ? '‚ö†Ô∏è' : '‚è∞';
  const urgencyText = daysUntilExpiry <= 1 ? 'URGENTE' : daysUntilExpiry <= 3 ? 'ATEN√á√ÉO' : 'LEMBRETE';
  
  return `${urgencyEmoji} *${urgencyText}*

Ol√° *${customerName}*!

Seu plano *${planName}* ${daysUntilExpiry === 0 ? 'vence HOJE' : `vence em ${daysUntilExpiry} dia${daysUntilExpiry > 1 ? 's' : ''}`} (${expiryDate}).

${daysUntilExpiry === 0 ? 'üî• Renove AGORA para n√£o ficar sem servi√ßo!' : 'üí° Renove antecipadamente e continue aproveitando nossos benef√≠cios!'}

üìû Entre em contato conosco para renovar.

*${companyName}*

_Mensagem autom√°tica - N√£o responda_`;
};

/**
 * Formata uma mensagem de c√≥digo pendente
 */
export const formatPendingCodeMessage = (
  customerName: string,
  planName: string,
  companyName: string = 'Sistema de Recarga'
): string => {
  return `‚è≥ *Processando seu Pedido*

Ol√° *${customerName}*!

Seu pagamento para o plano *${planName}* foi aprovado com sucesso! 

üîÑ Estamos preparando seu c√≥digo de recarga e voc√™ receber√° em breve.

‚è±Ô∏è Tempo estimado: at√© 30 minutos

Obrigado pela paci√™ncia!

*${companyName}*

_Mensagem autom√°tica - N√£o responda_`;
};